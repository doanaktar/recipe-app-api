docker ile projeyi eslestirme
    - docker sitesi settings, security > new access token
    - github > projenin repostorysi > settings > secrets > actions > new repostory secret
        -name: DOCKERHUB_USER, value: doganaktar (dockerhub kullanici adi)
        -name: DOCKERHUB_TOKEN, value: dckr_pat_66kibX4R6YVLicCuxhbYd4Qiks0 (dockerhub uzerinden olusturdugumuz token)

using docker compose
    `docker-compose run --rm app sh -c "python manage.py collectstatic"

    - `docker-compose` runs a  Docker Compose command
    - `run` will start a specific container defined in config
    - `--rm` removes the container
    - `app` is the name of the service
    - `sh -c` passes in a shell command
    - Command to run inside container

create a requirements.txt file
create a Dockerfile
create a .dockerignore file

`docker build .`

create docker-compose.yml file

`docker-compose build`

#linting and testing 
`docker-compose run --rm app sh -c "flake8"`
`docker-compose run --rm app sh -c "python manage.py test"`

#we dont need some package in deployed and we only need it in development
create a requirements.dev.txt for development requirements

*** create django project with docker ***
`docker-compose run --rm app sh -c "django-admin startproject config ."`

#runs our services
`docker-compose up`

setting github actions
create .github dir in root dir, create workflows dir in .github
create checks.yml file in workflows dir

django tests
placegolder tests.py added to each app
or, create tests/ subdirectory to split tests
    - only use tests.py or tests/ directory (not both)
    - test modules must stasrt with test_

running test
`docker-compose run --rm app sh -c "python manage.py test"`

*** test driven development ***
first write the test, after write the function

*** mocking ***
for exampe we have a function which sends e mail to user. with mocking we are not sending any e mail but we check
that e mail function works.
or a function checks db after a few seconf sleep. we replace the sleep with mock.

*** create a postgre connection in docker-compose.yml ***

*** add postgre requirements to Dockerfile ***

*** add psycopg2 to requirements.txt ***

#dockerfile da bir sey degistirirsen docker-compose down yap ardindan docker-compose build yap.